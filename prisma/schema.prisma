// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Session {
  id         String   @id @default(uuid())
  expiration DateTime @default(value: now())
  user       UserData @relation(fields: [userId], references: [id])
  userId     String
}

model Crew {
  id          String      @id @default(uuid())
  name        String
  users       UserData[]
  inventories Inventory[]
}

model UserAuth {
  id       String   @id @default(uuid())
  email    String   @unique
  username String   @unique
  pwdhash  String
  data     UserData @relation(fields: [dataId], references: [id])
  dataId   String   @unique
}

model UserData {
  id             String         @id @default(uuid())
  username       String
  crews          Crew[]
  selectedCrewId String?
  friends        UserData[]     @relation("friends")
  friendRelation UserData[]     @relation("friends")
  recvNotifs     UserNotif[] @relation("recipient")
  sentNotifs     UserNotif[] @relation("sender")
  sessions       Session[]      @relation
  heldItems      Item[]         @relation
  UserAuth       UserAuth?
}

model Inventory {
  id     String @id @default(uuid())
  name   String
  crew   Crew   @relation(fields: [crewId], references: [id])
  items  Item[]
  crewId String
}

model Item {
  id          String    @id @default(uuid())
  name        String
  type        Int
  count       Int
  quality     Int
  fields      Field[]
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String
  heldBy      UserData? @relation(fields: [heldById], references: [id])
  heldById    String?
}

model Field {
  id     String @id @default(uuid())
  name   String
  value  String
  item   Item   @relation(fields: [itemId], references: [id])
  itemId String
}

model UserNotif {
  id          String    @id @default(uuid())
  recipient   UserData @relation("recipient", fields: [recipientId], references: [id])
  recipientId String
  sender      UserData @relation("sender", fields: [senderId], references: [id])
  senderId    String
  title       String
  content     String?
  action      String
  unread      Boolean   @default(false)
}
